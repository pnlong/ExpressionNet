# README
# Phillip Long
# August 3, 2024

# Given a path to a sequence generated by the REMI-Style model, synthesize it as audio.

# python /home/pnlong/model_musescore/remi_generated_to_audio.py

# IMPORTS
##################################################

import argparse
from os.path import exists, dirname
from os import mkdir
import remi_representation
import utils
import numpy as np

##################################################


# ARGUMENTS
##################################################

def parse_args(args = None, namespace = None):
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(prog = "Generated to Audio", description = "Synthesize generated content as audio.")
    parser.add_argument("-p", "--path", required = True, type = str, help = "Path to generated sequence (.npy file)")
    parser.add_argument("-o", "--output_path", default = None, type = str, help = "Output path")
    return parser.parse_args(args = args, namespace = namespace)

##################################################

# MAIN METHOD
##################################################

if __name__ == "__main__":

    # parse the command-line arguments
    args = parse_args()
    
    # get variables
    encoding = remi_representation.get_encoding() # load the encoding
    vocabulary = utils.inverse_dict(remi_representation.Indexer(data = encoding["event_code_map"]).get_dict()) # for decoding

    # load codes
    codes = np.load(file = args.path)

    # convert codes to a music object
    music = remi_representation.decode(codes = codes, encoding = encoding, vocabulary = vocabulary) # convert to a MusicExpress object

    # output codes as audio
    if args.output_path is None:
        path_info = args.path[:-len(".npy")].split("/")[-4:]
        output_path = f"/home/pnlong/musescore/remi/generated_audio/{path_info[0]}.{path_info[-1]}.wav"
        if not exists(dirname(output_path)):
            mkdir(dirname(output_path))
    music.write(path = output_path)
    print(f"Saved to {output_path}.")

##################################################